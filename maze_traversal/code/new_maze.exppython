{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\r\nfrom vex import *\r\nimport urandom\r\n\r\n# Brain should be defined by default\r\nbrain = Brain()\r\n\r\n# Robot configuration code\r\nbrain_inertial = Inertial()\r\nleft_motor_a = Motor(Ports.PORT1, False)\r\nleft_motor_b = Motor(Ports.PORT6, False)\r\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\r\nright_motor_a = Motor(Ports.PORT5, True)\r\nright_motor_b = Motor(Ports.PORT10, True)\r\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\r\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 259.34, 320, 40, MM, 1)\r\nservo_a = Servo(brain.three_wire_port.a)\r\nbumper_d = Bumper(brain.three_wire_port.d)\r\ndistance_8 = Distance(Ports.PORT8)\r\nbumper_e = Bumper(brain.three_wire_port.e)\r\n\r\n\r\n# Wait for sensor(s) to fully initialize\r\nwait(100, MSEC)\r\n\r\ndef calibrate_drivetrain():\r\n    # Calibrate the Drivetrain Inertial\r\n    sleep(200, MSEC)\r\n    brain.screen.print(\"Calibrating\")\r\n    brain.screen.next_row()\r\n    brain.screen.print(\"Inertial\")\r\n    brain_inertial.calibrate()\r\n    while brain_inertial.is_calibrating():\r\n        sleep(25, MSEC)\r\n    brain.screen.clear_screen()\r\n    brain.screen.set_cursor(1, 1)\r\n\r\n#endregion VEXcode Generated Robot Configuration\r\n# ------------------------------------------\r\n# \r\n# \tProject:      VEXcode Project\r\n#\tAuthor:       VEX\r\n#\tCreated:\r\n#\tDescription:  VEXcode EXP Python Project\r\n# \r\n# ------------------------------------------\r\n\r\n# Library imports\r\nfrom vex import *\r\n\r\n\r\n\r\n# Begin project code\r\n\r\ndef adjust(wall_dif):\r\n    print(\"adjust\")\r\n    drivetrain.stop()\r\n    if(wall_dif > 0):\r\n\t    drivetrain.turn_for(LEFT, 15, DEGREES)\r\n    else:\r\n\t    drivetrain.turn_for(RIGHT, 15, DEGREES)\r\n    wait(20, MSEC)\r\n\r\ndef turn_left():\r\n    print(\"left\")\r\n    drivetrain.stop()\r\n    drivetrain.drive_for(FORWARD, 300, MM)\r\n    drivetrain.turn_for(LEFT, 90, DEGREES)\r\n    drivetrain.drive_for(FORWARD, 200, MM)\r\n    #Maybe have it drvie forward until it sees the wall the jump back to old function\r\n\r\ndef alt_turn_left():\r\n    print(\"alt left turn\")\r\n    drivetrain.stop()\r\n    left_motor_a.set_velocity(10, PERCENT)\r\n    left_motor_b.set_velocity(10, PERCENT)\r\n    right_motor_a.set_velocity(40, PERCENT)\r\n    right_motor_b.set_velocity(40, PERCENT)\r\n    left_motor_a.spin(FORWARD)\r\n    left_motor_b.spin(FORWARD)\r\n    right_motor_a.spin(FORWARD)\r\n    right_motor_b.spin(FORWARD)\r\n    while (True):\r\n        front_left_bumper_pressing = bumper_e.pressing()\r\n        front_right_bumper_pressing = bumper_d.pressing()\r\n        bumper_pressed = front_left_bumper_pressing or front_right_bumper_pressing\r\n        if(bumper_pressed):\r\n            drivetrain.stop()\r\n            drivetrain.set_drive_velocity(30, PERCENT)\r\n            turn_right()\r\n            break\r\n        if(distance_8.object_distance(MM) < 50):\r\n            drivetrain.stop()\r\n            drivetrain.set_drive_velocity(30, PERCENT)\r\n            break\r\n\r\ndef turn_right(): \r\n    print(\"right turn\")\r\n    drivetrain.stop()\r\n    drivetrain.drive_for(REVERSE, 100, MM)\r\n    drivetrain.turn_for(RIGHT, 95, DEGREES)\r\n\r\ndef debug(curr_dist, past_dist, wall_dif):\r\n    print(\"curr_dist = \" + str(curr_dist))\r\n    print(\"past_dist = \" + str(past_dist))\r\n    print(\"wall _dif = \" + str(wall_dif))\r\n\r\ndef main():\r\n    calibrate_drivetrain()\r\n    drivetrain.set_drive_velocity(30, PERCENT)\r\n\r\n    curr_dist = 0\r\n    past_dist = int(distance_8.object_distance(MM))\r\n    time_since_last_change = 0\r\n\r\n    while True:\r\n        front_left_bumper_pressing = bumper_e.pressing()\r\n        front_right_bumper_pressing = bumper_d.pressing()\r\n        bumper_pressed = front_left_bumper_pressing or front_right_bumper_pressing\r\n\r\n        curr_dist = int(distance_8.object_distance(MM))\r\n        wall_dif = curr_dist - past_dist\r\n\r\n        drivetrain.drive(FORWARD)\r\n\r\n        debug(curr_dist, past_dist, wall_dif)\r\n\r\n        if(bumper_pressed):\r\n            turn_right()\r\n            time_since_last_change = 0\r\n            curr_dist = int(distance_8.object_distance(MM))\r\n\r\n        elif(curr_dist > (past_dist + 75)):\r\n            #turn_left()\r\n            alt_turn_left()\r\n            time_since_last_change = 0\r\n            curr_dist = int(distance_8.object_distance(MM))\r\n\r\n        elif(abs(wall_dif) > 20):\r\n            adjust(wall_dif)\r\n            time_since_last_change = 0\r\n            curr_dist = int(distance_8.object_distance(MM))\r\n\r\n        elif(time_since_last_change > 1000):\r\n            print(\"time change\")\r\n            drivetrain.turn_for(LEFT, 90, DEGREES)\r\n\r\n        elif(curr_dist != past_dist):\r\n            time_since_last_change = 0\r\n\r\n        else:\r\n            time_since_last_change += 1\r\n        \r\n        past_dis = curr_dist\r\n\r\nmain()","textLanguage":"python","rconfig":[{"port":[1,6,5,10,null],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel325in","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[1],"name":"servo_a","customName":false,"deviceType":"Servo","deviceClass":"servo","setting":{},"triportSourcePort":22},{"port":[4],"name":"bumper_d","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[8],"name":"distance_8","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[5],"name":"bumper_e","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":0,"platform":"EXP","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}