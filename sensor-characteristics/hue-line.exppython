{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT1, True)\nright_drive_smart = Motor(Ports.PORT5, False)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 219.44, 320, 40, MM, 1.6666666666666667)\nbumper_right = Bumper(brain.three_wire_port.b)\nbumper_left = Bumper(brain.three_wire_port.a)\nradar = Distance(Ports.PORT8)\noptical_servo = Servo(brain.three_wire_port.g)\noptical_orientation = PotentiometerV2(brain.three_wire_port.h)\neye = Optical(Ports.PORT3)\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      Assignmetn 3: Sensor Characteristics: Part 4: Hue Line\n#\tAuthor:       Creed, Augie, Nathaniel (nboynick)\n#\tCreated:      2024-02-03\n#\tDescription:  Make the robot follow a colored line on the floor.\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\nrecent_hue_color = None\n\ndef offtrack_left():\n    print(\"Executing offtack_left().\")\n    drivetrain.turn_for(RIGHT, 10, DEGREES)\n    print(\"Return: offtrack_left(): None\")\n\ndef offtrack_right():\n    print(\"Executing offtrack_right().\")\n    drivetrian.turn_for(LEFT, 10, DEGREES)\n    print(\"Return: offtrack_right(): None\")\n\ndef offtrack_gap():\n    print(\"Executing offtrack_gap().\")\n    drivetrain.drive_for(FORWARD, 10, INCHES)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 10, INCHES)\n    print(\"Return: offtrack_gap(): None\")\n\ndef offtrack_gap_2():\n    print(\"Executing offtrack_gap_2().\")\n    drivetrain.turn_for(LEFT, 45, DEGREES)\n    while True:\n        color_value = eye.color()\n        if color_value == Color.BLUE:\n            break\n        else:\n            drivetrain.drive_for(FORWARD, 10, MM)\n    drivetrain.turn_for(LEFT, 45, DEGREES)\n    print(\"Return: offtrack_gap_2(): None\")\n\ndef convert_to_color(hue_value):\n    print(\"Executing convert_to_color(%s).\" % str(hue_value))\n    \"\"\"\n    Red: 0 - ~20\n    Green: 70 - 170\n    Grey/Black: unknown???\n    Blue: 171 - 240\n    \"\"\"\n    if hue_value >= 0 and hue_value < 25:\n        print(\"Return: convert_to_color(): \\\"red\\\"\")\n        return \"red\"\n    if hue_value >= 70 and hue_value < 150:\n        print(\"Return: convert_to_color(): \\\"green\\\"\")\n        return \"green\"\n    if hue_value >= 171 and hue_value < 240:\n        print(\"Return: convert_to_color(): \\\"blue\\\"\")\n        return \"blue\"\n    else:\n        print(\"Return: convert_to_color(): -1)\n        return -1\n\ndef main():\n    print(\"Executing main().\")\n    calibrate_drivetrain()\n    while True:\n        global recent_hue_color\n        recent_hue_color = eye.hue()\n        print(\"Hue: %s.\" % str(recent_hue_color))\n        current_color = eye.color() # maybe switch to hue()\n        if current_color == Color.RED:\n            offtrack_left()\n        elif current_color == Color.GREEN:\n            offtrack_right():\n        elif current_color == Color.BLACK:\n            offtack_gap():\n        else:\n            drivetrain.drive_for(FORWARD, 10, MM)\n    print(\"Return: main(): 0\")\n    return 0\n\nmain()\n\ndef test_hue_returns():\n    print(\"Executing test_hue_returns().\")\n    while True:\n        print(eye.hue())\n        wait(300, MSEC)\n","textLanguage":"python","rconfig":[{"port":[1,5,null],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel275in","gearRatio":"60:36","direction":"rev","gyroType":"integrated","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[2],"name":"bumper_right","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[1],"name":"bumper_left","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[8],"name":"radar","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[7],"name":"optical_servo","customName":true,"deviceType":"Servo","deviceClass":"servo","setting":{},"triportSourcePort":22},{"port":[8],"name":"optical_orientation","customName":true,"deviceType":"PotentiometerV2","deviceClass":"potV2","setting":{},"triportSourcePort":22},{"port":[3],"name":"eye","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22}],"slot":0,"platform":"EXP","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}