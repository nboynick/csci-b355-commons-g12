{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT1, True)\nright_drive_smart = Motor(Ports.PORT5, False)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 219.44, 320, 40, MM, 1.6666666666666667)\nbumper_right = Bumper(brain.three_wire_port.b)\nbumper_left = Bumper(brain.three_wire_port.a)\nradar = Distance(Ports.PORT8)\noptical_servo = Servo(brain.three_wire_port.g)\noptical_orientation = PotentiometerV2(brain.three_wire_port.h)\neye = Optical(Ports.PORT3)\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n#endregion VEXcode Generated Robot Configuration\n# ------------------------------------------\n# \n# \tProject:      Assignmetn 3: Sensor Characteristics: Part 4: Hue Line\n#\tAuthor:       Creed, Augie, Nathaniel (nboynick)\n#\tCreated:      2024-02-03\n#\tDescription:  Make the robot follow a colored line on the floor.\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\nrecent_hue_color = None\ndistance_travelled = 0 # in MM\ncorner_one_resolved = True\ncorner_two_resolved = True\n\ndef offtrack_left():\n    print(\"Executing offtack_left().\")\n    drivetrain.turn_for(RIGHT, 5, DEGREES)\n\ndef offtrack_right():\n    print(\"Executing offtrack_right().\")\n    drivetrain.turn_for(LEFT, 5, DEGREES)\n\ndef turn_right():\n    print(\"Executing turn_right().\")\n    global corner_two_resolved\n    corner_two_resolved = True\n    drivetrain.drive_for(REVERSE, 5, MM)\n    while True:\n        color_value = int(eye.hue())\n        color_value = convert_to_color(color_value)\n        if color_value in [\"blue\", \"teal\", \"green\"]:\n            break\n        else:\n            drivetrain.turn_for(RIGHT, 10, DEGREES)\n\ndef turn_left():\n    print(\"Executing turn_left().\")\n    global corner_one_resolved\n    corner_one_resolved = True\n    drivetrain.drive_for(REVERSE, 5, MM)\n    while True:\n        color_value = int(eye.hue())\n        color_value = convert_to_color(color_value)\n        if color_value in [\"blue\", \"purple\", \"red\"]:\n            break\n        else:\n            drivetrain.turn_for(LEFT, 10, DEGREES)\n\ndef offtrack_gap():\n    drivetrain.turn_for(LEFT, 65, DEGREES)\n    global distance_travelled\n    old_distance_travelled = distance_travelled\n    print(\"old-distance: %s\" % str(old_distance_travelled))\n    while True:\n        color_value = int(eye.hue())\n        color_value = convert_to_color(color_value)\n        if color_value in [\"red\", \"purple\", \"blue\", \"teal\", \"green\"]:\n            break\n        elif distance_travelled - old_distance_travelled > 1150:\n            break\n        else:\n            make_step(10)\n    if color_value in [\"green\", \"teal\"]:\n        drivetrain.drive_for(FORWARD, 135, MM)\n    else:\n        drivetrain.drive_for(FORWARD, 145, MM)\n    drivetrain.turn_for(LEFT, 50, DEGREES)\n    print(\"new-distance: %s\" % str(distance_travelled))\n\ndef convert_to_color_2(hue_value):\n    \"\"\"\n    With light enabled:\n    RED: 358\n    PURPLE: 348\n    BLUE: 240\n    TEAL: 180\n    GREEN: 74\n    OFF_COURSE: 13\n    \"\"\"\n    hue_value = hue_value % 360\n    return_color = None\n    if hue_value >= 350:\n        return_color = \"red\"\n    elif hue_value >= 340:\n        return_color = \"purple\"\n    elif hue_value >= 285:\n        return_color = \"blue-black\"\n    elif hue_value < 260 and hue_value > 200:\n        return_color = \"blue\"\n    elif hue_value < 200 and hue_value > 140:\n        return_color = \"teal\"\n    elif hue_value < 100 and hue_value > 60:\n        return_color = \"green\"\n    elif hue_value < 20:\n        return_color = \"black\"\n    else:\n        return_color = \"unknown\"\n    if return_color == \"unknown\":\n        print(return_color + \": \" + str(hue_value))\n    else:\n        print(return_color)\n    return return_color\n\ndef convert_to_color(hue_value):\n    \"\"\"\n    With light enabled:\n    RED: 358\n    PURPLE: 348\n    BLUE: 240\n    TEAL: 180\n    GREEN: 74\n    OFF_COURSE: 13\n    \"\"\"\n    hue_value = hue_value % 360\n    return_color = None\n    if hue_value >= 350:\n        return_color = \"red\"\n    elif hue_value >= 340:\n        return_color = \"purple\"\n    elif hue_value >= 285:\n        return_color = \"blue-black\"\n    elif hue_value >= 200:\n        return_color = \"blue\"\n    elif hue_value >= 140:\n        return_color = \"teal\"\n    elif hue_value >= 60:\n        return_color = \"green\"\n    elif 20 >= hue_value:\n        return_color = \"black\"\n    else:\n        return_color = \"unknown\"\n    if return_color == \"unknown\":\n        print(return_color + \": \" + str(hue_value))\n    else:\n        print(return_color)\n    return return_color\n\ndef brain_print_distance():\n    global distance_travelled\n    brain.screen.clear_screen()\n    brain.screen.clear_row(1)\n    brain.screen.set_cursor(1,1)\n    brain.screen.print(distance_travelled)\n\ndef make_step(step_size=15):\n    global distance_travelled\n    distance_travelled += step_size\n    drivetrain.drive_for(FORWARD, step_size, MM)\n    brain_print_distance()\n\ndef main():\n    calibrate_drivetrain()\n    eye.set_light(LedStateType.ON)\n    make_step()\n    make_step()\n    while True:\n        global recent_hue_color\n        global distance_travelled\n        global corner_one_resolved\n        global corner_two_resolved\n        brain_print_distance()\n        new_hue_color = int(eye.hue())\n        color_recognized = convert_to_color(new_hue_color)\n        if color_recognized in [\"purple\", \"red\"]:\n            offtrack_left()\n        elif color_recognized in [\"teal\", \"green\"]:\n            offtrack_right()\n        elif color_recognized == \"black\":\n            if distance_travelled > 6500:\n                corner_one_resolved = True\n            if distance_travelled > 9000:\n                corner_two_resolved = True\n            if not corner_one_resolved:\n                turn_left()\n            elif not corner_two_resolved:\n                turn_right()\n            else:\n                offtrack_gap()\n        else:\n            make_step()\n        recent_hue_color = color_recognized\n    return 0\n\nmain()\n","textLanguage":"python","rconfig":[{"port":[1,5,null],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel275in","gearRatio":"60:36","direction":"rev","gyroType":"integrated","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[2],"name":"bumper_right","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[1],"name":"bumper_left","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[8],"name":"radar","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[7],"name":"optical_servo","customName":true,"deviceType":"Servo","deviceClass":"servo","setting":{},"triportSourcePort":22},{"port":[8],"name":"optical_orientation","customName":true,"deviceType":"PotentiometerV2","deviceClass":"potV2","setting":{},"triportSourcePort":22},{"port":[3],"name":"eye","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22}],"slot":6,"platform":"EXP","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}